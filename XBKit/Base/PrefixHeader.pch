//
//  PrefixHeader.pch
//  XBProjectModule
//
//  Created by Xinbo Hong on 2018/1/2.
//  Copyright © 2018年 Xinbo. All rights reserved.
//

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

/** 分类*/
#import "NSData+AES256.h"

#import "UIDevice+Type.h"


#import "NSString+Regex.h"
#import "NSString+Encryption.h"
#import "NSData+AES256.h"
#import "UIFont+adapt.h"
/** 属性头文件*/
#import "GlobalConstant.h"

/** 方法类*/


/** 第三方导入类*/
#import <SDWebImage/UIImageView+WebCache.h>


//个性化输出内容
#ifdef DEBUG
#define NSLog(fmt, ...) NSLog(@"\n------------------[Line %d] Begin-------------------------\n类和方法: %s\n信息内容: " fmt @"\n------------------[Line %d] End-------------------------\n",__LINE__, __PRETTY_FUNCTION__, ##__VA_ARGS__, __LINE__)
#else
#define NSLog(...)
#endif

#define WeakObj(o) autoreleasepool{} __weak typeof(o) o##Weak = o;
#define StrongObj(o) autoreleasepool{} __strong typeof(o) o = o##Strong;

//NSCoding 的自动归档解档
#define XBCodingRuntime_EncodeWithCoder(Class) \ unsigned int outCount = 0;\
Ivar *ivars = class_copyIvarList([Class class], &outCount);\ for (int i = 0; i < outCount; i++) {\
Ivar ivar = ivars[i];\ NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];\
[aCoder encodeObject:[self valueForKey:key] forKey:key];\
}\
free(ivars);

#define XBCodingRuntime_InitWithCoder(Class)\ if (self = [super init]) {\ unsigned int outCount = 0;\
Ivar *ivars = class_copyIvarList([Class class], &outCount);\ for (int i = 0; i < outCount; i++) {\
Ivar ivar = ivars[i];\ NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];\ id value = [aDecoder decodeObjectForKey:key];\ if (value) {\
[self setValue:value forKey:key];\
}\
}\
free(ivars);\
}\ return self;

/* 使用方式
 - (void)encodeWithCoder:(NSCoder *)aCoder {
    XBCodingRuntime_EncodeWithCoder(Father)
 }
 - (nullable instancetype)initWithCoder:(NSCoder *)aDecoder {
    XBCodingRuntime_InitWithCoder(Father)
 }
 */

//单例宏定义

// .h
#define singleton_interface(class) + (instancetype)shared##class;
// .m
#define singleton_implementation(class) \
static class *kSingleObject = nil;\
+ (instancetype)sharedInstance {\
    static dispatch_once_t onceToken;\
    dispatch_once(&onceToken, ^{\
        kSingleObject = [[super allocWithZone:NULL] init];\
    });\
    return kSingleObject;\
}\
+ (instancetype)allocWithZone:(struct _NSZone *)zone {\
    return [self sharedInstance];\
}\
- (id)copy {\
    return kSingleObject;\
}\
- (id)mutableCopy {\
    return kSingleObject;\
}
/* 使用方式
 .h
 singleton_interface(Class)
 .m
 singleton_implementation(Class)
 */
#endif /* PrefixHeader_pch */
